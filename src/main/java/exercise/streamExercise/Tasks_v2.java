package exercise.streamExercise;

import exercise.streamExercise.data_v2.*;

import java.time.LocalDate;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;

/**
 * Stream API Задачи v2 - университетская система управления
 * 
 * Фокус на:
 * - сложных маппингах и трансформации данных между сущностями
 * - работе с многоуровневыми структурами
 * - группировка и агрегационные операции
 * - производительные решения через параллельные вычисления
 * 
 * Уровни сложности:
 * 1-2: базовые операции с фильтрацией и трансформацией
 * 3: группировка, статистика, джойны с многоуровневыми структурами
 * 4: сложные алгоритмы, custom collectors, корреляции
 */
public class Tasks_v2 {
    private static UniversityDataset dataset;
    public static void main(String[] args) {
        // Генерируем университетский датасет
        dataset = DataGeneratorV2.generateCompleteDataset();
        dataset.printDatasetStatistics();
        
        System.out.println("\n=== Уровень 1 задачи ===");
        // level1Task1();
        // level1Task2();
        // level1Task3();
        // level1Task4();
         //level1Task5();
        
        System.out.println("\n=== Уровень 2 задачи ===");
        // level2Task1();
        // level2Task2();
        // level2Task3();
        // level2Task4();
        //level2Task5();
        
        System.out.println("\n=== Уровень 3 задачи ===");
        // level3Task1();
        // level3Task2();
        // level3Task3();
        // level3Task4();
         //level3Task5();
        
        System.out.println("\n=== Уровень 4 задачи ===");
        // level4Task1();
        // level4Task2();
        // level4Task3();
        // level4Task4();
         //level4Task5();
    }

    // ========================================
    // Уровень 1: Базовые операции
    // ========================================

    /**
     * Задача 1.1: Выводим имена всех активных студентов с GPA > 3.5
     * Демонстрируем: фильтрация + маппинг
     */
    public static void level1Task1() {
        System.out.println("Задача 1.1: Активные студенты с высоким GPA");
        
        List<String> highGpaStudents = dataset.getStudents().stream()
                .filter(student -> student.getStatus() == StudentStatus.ACTIVE)
                .filter(student -> student.getGpa() > 3.5)
                .map(Student::getFullName)
                .sorted()
                .collect(Collectors.toList());
        
        System.out.println("Студентов с GPA > 3.5: " + highGpaStudents.size());
        highGpaStudents.forEach(System.out::println);
    }

    /**
     * ?????? 1.2: ????? ??? ????? ?????? ADVANCED ? ??????????? ???????? >= 4
     * ??????????????? ??: ?????????? ?? ????????????? ????????
     */
    public static void level1Task2() {
        System.out.println("?????? 1.2: ??????????? ????? ? ???????? ?????????");
        
        List<String> advancedCourses = dataset.getCourses().stream()
                .filter(course -> course.getLevel() == CourseLevel.ADVANCED)
                .filter(course -> course.getCredits() >= 4)
                .map(course -> course.getName() + " (" + course.getCredits() + " ????????)")
                .collect(Collectors.toList());
        
        System.out.println("??????????? ?????: " + advancedCourses.size());
        advancedCourses.forEach(System.out::println);
    }

    /**
     * ?????? 1.3: ???????? email'? ???? ??????????? ? ??????????????? ???????????
     * ??????????????? ??: ?????????? enum + ??????????????
     */
    public static void level1Task3() {
        System.out.println("?????? 1.3: Email'? ??????? ??????????????");
        
        List<String> professorEmails = dataset.getTeachers().stream()
                .filter(teacher -> teacher.getRank() == AcademicRank.PROFESSOR || 
                                 teacher.getRank() == AcademicRank.ASSOCIATE_PROFESSOR)
                .map(Teacher::getEmail)
                .sorted()
                .collect(Collectors.toList());
        
        System.out.println("Email'? ???????????: " + professorEmails.size());
        professorEmails.forEach(System.out::println);
    }

    /**
     * ?????? 1.4: ????? ??? ??????? ?? ???????? COMPLETED ? ???????? > 5000
     * ??????????????? ??: ?????? ? Optional ??????
     */
    public static void level1Task4() {
        System.out.println("?????? 1.4: ??????????? ??????? ? ??????? ????????");
        
        List<String> expensiveProjects = dataset.getProjects().stream()
                .filter(project -> project.getStatus() == ProjectStatus.COMPLETED)
                .filter(project -> project.getBudget() > 5000)
                .map(project -> project.getTitle() + " - $" + project.getBudget())
                .collect(Collectors.toList());
        
        System.out.println("??????? ??????????? ???????: " + expensiveProjects.size());
        expensiveProjects.forEach(System.out::println);
    }

    /**
     * ?????? 1.5: ???????? ???????? ???? ???????? ?? IT ?????????
     * ??????????????? ??: ??????? ?????????? ?????
     */
    public static void level1Task5() {
        System.out.println("?????? 1.5: IT ????????");
        
        List<String> itCompanies = dataset.getCompanies().stream()
                .filter(company -> company.getIndustry().equalsIgnoreCase("Technology"))
                .map(Company::getName)
                .sorted()
                .collect(Collectors.toList());
        
        System.out.println("IT ????????: " + itCompanies.size());
        itCompanies.forEach(System.out::println);
    }

    // ========================================
    // ??????? 2: ????????????? ????????
    // ========================================

    /**
     * ?????? 2.1: ??????? Map<String, List<String>> - ????? -> ?????? ???? ?????????
     * ??????????????? ??: ??????????? ? ?????????
     */
    public static void level2Task1() {
        System.out.println("?????? 2.1: ???????? ?? ???????");
        
        Map<String, List<String>> studentsByCity = dataset.getStudents().stream()
                .collect(Collectors.groupingBy(
                    Student::getCity,
                    Collectors.mapping(Student::getFullName, Collectors.toList())
                ));
        
        System.out.println("????????????? ????????? ?? ???????:");
        studentsByCity.forEach((city, students) -> 
            System.out.println(city + ": " + students.size() + " ?????????"));
    }

    /**
     * ?????? 2.2: ????? ??????? ???????? ?????????????? ?? ????????????? ??????
     * ??????????????? ??: ??????????? ? ??????????
     */
    public static void level2Task2() {
        System.out.println("?????? 2.2: ??????? ???????? ?? ??????");
        
        Map<AcademicRank, Double> avgSalaryByRank = dataset.getTeachers().stream()
                .collect(Collectors.groupingBy(
                    Teacher::getRank,
                    Collectors.averagingDouble(Teacher::getSalary)
                ));
        
        System.out.println("??????? ???????? ?? ??????:");
        avgSalaryByRank.forEach((rank, salary) -> 
            System.out.printf("%s: $%.2f%n", rank, salary));
    }

    /**
     * ?????? 2.3: ???????? Set<String> ?????????? ????????????? ???? ??????????????
     * ??????????????? ??: flatMap ??? ?????????
     */
    public static void level2Task3() {
        System.out.println("?????? 2.3: ??? ????????????? ??????????????");
        
        Set<String> allSpecializations = dataset.getTeachers().stream()
                .flatMap(teacher -> teacher.getSpecializations().stream())
                .collect(Collectors.toSet());
        
        System.out.println("?????????? ?????????????: " + allSpecializations.size());
        allSpecializations.forEach(System.out::println);
    }

    /**
     * ?????? 2.4: ??????? List<String> ??????? "???????: GPA" ??????????????? ?? GPA ????????
     * ??????????????? ??: ?????????? + ??????????????
     */
    public static void level2Task4() {
        System.out.println("?????? 2.4: ??? ????????? ?? GPA");
        
        List<String> topStudents = dataset.getStudents().stream()
                .sorted((s1, s2) -> Double.compare(s2.getGpa(), s1.getGpa()))
                .limit(10)
                .map(student -> String.format("%s: %.2f", student.getFullName(), student.getGpa()))
                .collect(Collectors.toList());
        
        System.out.println("???-10 ?????????:");
        topStudents.forEach(System.out::println);
    }

    /**
     * ?????? 2.5: ?????????? ?????????? ?????? ?? ??????? ?????????
     * ??????????????? ??: ??????????? ? ?????????
     */
    public static void level2Task5() {
        System.out.println("?????? 2.5: ????? ?? ??????? ?????????");
        
        Map<CourseLevel, Long> coursesByLevel = dataset.getCourses().stream()
                .collect(Collectors.groupingBy(
                    Course::getLevel,
                    Collectors.counting()
                ));
        
        System.out.println("????????????? ?????? ?? ???????:");
        coursesByLevel.forEach((level, count) -> 
            System.out.println(level + ": " + count + " ??????"));
    }

    // ========================================
    // ??????? 3: ??????? ??????????? ? ?????????
    // ========================================

    /**
     * ?????? 3.1: ??????? Map<String, Map<FacultyType, List<Student>>> - ?????? -> ??? ?????????? -> ????????
     * ??????????????? ??: ?????????????? ??????????? ? join'???
     */
    public static void level3Task1() {
        System.out.println("?????? 3.1: ???????? ?? ??????? ? ????? ???????????");
        
        Map<Long, FacultyType> facultyTypes = dataset.getFaculties().stream()
                .collect(Collectors.toMap(Faculty::getId, Faculty::getType));
        
        Map<String, Map<FacultyType, List<Student>>> studentsByCountryAndFaculty = 
            dataset.getStudents().stream()
                .filter(student -> facultyTypes.containsKey(student.getFacultyId()))
                .collect(Collectors.groupingBy(
                    Student::getCountry,
                    Collectors.groupingBy(
                        student -> facultyTypes.get(student.getFacultyId())
                    )
                ));
        
        System.out.println("????????????? ?????????:");
        studentsByCountryAndFaculty.forEach((country, byFaculty) -> {
            System.out.println(country + ":");
            byFaculty.forEach((type, students) -> 
                System.out.println("  " + type + ": " + students.size()));
        });
    }

    /**
     * ?????? 3.2: ????? ?????????? ? ???????????? ??????????? ????????? ? ??????????
     * ??????????????? ??: ??????? ????????? ? ?????????
     */
    public static void level3Task2() {
        System.out.println("?????? 3.2: ?????????? ? ???????????? ??????????? ????????????");
        
        Map<Long, String> facultyNames = dataset.getFaculties().stream()
                .collect(Collectors.toMap(Faculty::getId, Faculty::getName));
        
        Map<String, Long> scholarshipStudentsByFaculty = dataset.getStudents().stream()
                .filter(Student::getHasScholarship)
                .collect(Collectors.groupingBy(
                    student -> facultyNames.getOrDefault(student.getFacultyId(), "Unknown"),
                    Collectors.counting()
                ));
        
        Optional<Map.Entry<String, Long>> topFaculty = scholarshipStudentsByFaculty.entrySet()
                .stream()
                .max(Map.Entry.comparingByValue());
        
        if (topFaculty.isPresent()) {
            System.out.printf("?????: %s ? %d ?????????????%n", 
                            topFaculty.get().getKey(), topFaculty.get().getValue());
        }
        
        System.out.println("??? ??????????:");
        scholarshipStudentsByFaculty.entrySet().stream()
                .sorted(Map.Entry.<String, Long>comparingByValue().reversed())
                .forEach(entry -> System.out.println(entry.getKey() + ": " + entry.getValue()));
    }

    /**
     * ?????? 3.3: ??????? ????????? ??????: Map<ProjectType, Map<ProjectStatus, Double>> 
     * ??? ??????? -> ?????? -> ??????? ??????
     * ??????????????? ??: ????????? ??????????? ? ??????????
     */
    public static void level3Task3() {
        System.out.println("?????? 3.3: ??????? ?????? ???????? ?? ???? ? ???????");
        
        Map<ProjectType, Map<ProjectStatus, Double>> avgBudgetByTypeAndStatus = 
            dataset.getProjects().stream()
                .filter(project -> project.getBudget() > 0)
                .collect(Collectors.groupingBy(
                    Project::getType,
                    Collectors.groupingBy(
                        Project::getStatus,
                        Collectors.averagingDouble(Project::getBudget)
                    )
                ));
        
        System.out.println("??????? ?????? ?? ???? ? ??????? ????????:");
        avgBudgetByTypeAndStatus.forEach((type, byStatus) -> {
            System.out.println(type + ":");
            byStatus.forEach((status, avgBudget) -> 
                System.out.printf("  %s: $%.2f%n", status, avgBudget));
        });
    }

    /**
     * ?????? 3.4: ????? ????????? ? ?????????? ???????? ?? ??????? ?????
     * ??????????????? ??: ??????????? ? ??????? ????????? + join ??????
     */
    public static void level3Task4() {
        System.out.println("?????? 3.4: ?????? ???????? ?? ??????");
        
        Map<Long, String> studentNames = dataset.getStudents().stream()
                .collect(Collectors.toMap(Student::getId, Student::getFullName));
        
        Map<Long, String> courseNames = dataset.getCourses().stream()
                .collect(Collectors.toMap(Course::getId, Course::getName));
        
        Map<Long, Optional<Grade>> topGradeByCourse = dataset.getGrades().stream()
                .collect(Collectors.groupingBy(
                    Grade::getCourseId,
                    Collectors.maxBy(Comparator.comparing(Grade::getScore))
                ));
        
        System.out.println("?????? ?????????? ?? ??????:");
        topGradeByCourse.forEach((courseId, gradeOpt) -> {
            if (gradeOpt.isPresent()) {
                Grade grade = gradeOpt.get();
                String courseName = courseNames.getOrDefault(courseId, "Unknown Course");
                String studentName = studentNames.getOrDefault(grade.getStudentId(), "Unknown Student");
                System.out.printf("%s: %s (%.2f ??????)%n", 
                                courseName, studentName, grade.getScore());
            }
        });
    }

    /**
     * ?????? 3.5: ??????? ????? ?? ?????????????: ???????? -> ?????????? ???????????, 
     * ????? ?????????? ?????????, ??????? ???????
     * ??????????????? ??: ??????????? ????????? ? ?????????????? ?????????
     */
    public static void level3Task5() {
        System.out.println("?????? 3.5: ??????????? ????? ?? ?????????????");
        
        dataset.getUniversities().forEach(university -> {
            int facultyCount = university.getFaculties().size();
            
            long studentCount = university.getFaculties().stream()
                    .flatMap(faculty -> faculty.getCourses().stream())
                    .flatMap(course -> course.getEnrolledStudents().stream())
                    .distinct()
                    .count();
            
            System.out.printf("???????????: %s%n", university.getName());
            System.out.printf("  ???????????: %d%n", facultyCount);
            System.out.printf("  ?????????: %d%n", studentCount);
            System.out.printf("  ???????: %d%n", university.getRanking());
            System.out.printf("  ????????? ????????: $%.2f%n%n", university.getTuitionFee());
        });
    }

    // ========================================
    // ??????? 4: ?????????? ??????
    // ========================================

    /**
     * ?????? 4.1: ??????? ????????? Collector ??? ???????? ?????????? ?? ?????????:
     * ???/????/??????? GPA, ?????????? ????????????, ????????????? ?? ????? ????????
     * ??????????????? ??: custom Collector ? ??????????? ???????????
     */
    public static void level4Task1() {
        System.out.println("?????? 4.1: ??????????? ?????????? ?? ?????????");
        
        StudentStatistics stats = dataset.getStudents().stream()
                .collect(new StudentStatisticsCollector());
        
        System.out.println("?????????? ?? ?????????:");
        System.out.printf("????? ?????????: %d%n", stats.totalCount);
        System.out.printf("??????????? GPA: %.2f%n", stats.minGpa);
        System.out.printf("???????????? GPA: %.2f%n", stats.maxGpa);
        System.out.printf("??????? GPA: %.2f%n", stats.avgGpa);
        System.out.printf("????????????: %d (%.1f%%)%n", 
                        stats.scholarshipCount, 
                        (stats.scholarshipCount * 100.0 / stats.totalCount));
        System.out.println("????????????? ?? ????? ????????:");
        stats.yearDistribution.forEach((year, count) -> 
            System.out.printf("  %d ????: %d ?????????%n", year, count));
    }

    /**
     * ?????? 4.2: ??????????? ??????? ????????????: ??? ??????? ???????? ????? 
     * ???????? ?????????? ??????? ?? ?????? ??? ?????????? ? GPA
     * ??????????????? ??: ??????? join'? ? ????????? ?????????????
     */
    public static void level4Task2() {
        System.out.println("?????? 4.2: ??????? ???????????? ????????");
        
        // ??????? Map ??? ???????? ??????
        Map<Long, Faculty> facultyMap = dataset.getFaculties().stream()
                .collect(Collectors.toMap(Faculty::getId, Function.identity()));
        
        Map<Long, List<Long>> coursesByFaculty = dataset.getFaculties().stream()
                .collect(Collectors.toMap(
                    Faculty::getId,
                    faculty -> faculty.getCourses().stream()
                              .map(Course::getId)
                              .collect(Collectors.toList())
                ));
        
        // ??? ??????? ????????? ???????? ?????? ?????????? ???????
        dataset.getStudents().stream()
                .filter(student -> student.getStatus() == StudentStatus.ACTIVE)
                .filter(student -> student.getGpa() > 3.0)
                .limit(5) // ????????? ????? ??? ????????????
                .forEach(student -> {
                    Faculty studentFaculty = facultyMap.get(student.getFacultyId());
                    List<Long> relevantCourses = coursesByFaculty.getOrDefault(student.getFacultyId(), 
                                                                              Collections.emptyList());
                    
                    List<Project> recommendedProjects = dataset.getProjects().stream()
                            .filter(project -> project.getStatus() == ProjectStatus.PLANNING || 
                                             project.getStatus() == ProjectStatus.IN_PROGRESS)
                            .filter(project -> relevantCourses.contains(project.getCourseId()))
                            .filter(project -> project.getDifficulty() <= (int)(student.getGpa() * 2.5))
                            .sorted((p1, p2) -> Integer.compare(p2.getDifficulty(), p1.getDifficulty()))
                            .limit(3)
                            .collect(Collectors.toList());
                    
                    System.out.printf("???????: %s (GPA: %.2f, ?????????: %s)%n", 
                                    student.getFullName(), student.getGpa(), 
                                    studentFaculty != null ? studentFaculty.getName() : "Unknown");
                    System.out.println("????????????? ???????:");
                    recommendedProjects.forEach(project -> 
                        System.out.printf("  - %s (?????????: %d, ??????: $%.2f)%n", 
                                        project.getTitle(), project.getDifficulty(), project.getBudget()));
                    System.out.println();
                });
    }

    /**
     * ?????? 4.3: ??????? ????????????? ????? "Academic Performance Analysis":
     * ?????? ?????????? ????? GPA ?????????, ?? ???????? ? ??????????? ????????
     * ??????????????? ??: ?????????????? ?????? ? ??????????
     */
    public static void level4Task3() {
        System.out.println("?????? 4.3: ?????? ????????????? ????????????");
        
        // ???????? ?????? ??? ???????
        Map<Long, Double> studentGpas = dataset.getStudents().stream()
                .collect(Collectors.toMap(Student::getId, Student::getGpa));
        
        Map<Long, Double> studentAvgGrades = dataset.getGrades().stream()
                .collect(Collectors.groupingBy(
                    Grade::getStudentId,
                    Collectors.averagingDouble(Grade::getScore)
                ));
        
        Map<Long, Long> studentProjectCounts = dataset.getProjects().stream()
                .flatMap(project -> project.getStudentIds().stream())
                .collect(Collectors.groupingBy(
                    Function.identity(),
                    Collectors.counting()
                ));
        
        // ??????????? ??????????
        List<StudentPerformanceData> performanceData = studentGpas.entrySet().stream()
                .map(entry -> {
                    Long studentId = entry.getKey();
                    Double gpa = entry.getValue();
                    Double avgGrade = studentAvgGrades.getOrDefault(studentId, 0.0);
                    Long projectCount = studentProjectCounts.getOrDefault(studentId, 0L);
                    return new StudentPerformanceData(studentId, gpa, avgGrade, projectCount);
                })
                .filter(data -> data.avgGrade > 0)
                .collect(Collectors.toList());
        
        // ?????????? ?? ?????????? GPA
        Map<String, List<StudentPerformanceData>> byGpaCategory = performanceData.stream()
                .collect(Collectors.groupingBy(data -> {
                    if (data.gpa >= 3.5) return "??????? GPA (?3.5)";
                    else if (data.gpa >= 3.0) return "??????? GPA (3.0-3.5)";
                    else return "?????? GPA (<3.0)";
                }));
        
        System.out.println("?????? ?????????????????? ?? ?????????? GPA:");
        byGpaCategory.forEach((category, students) -> {
            double avgGrade = students.stream()
                    .mapToDouble(s -> s.avgGrade)
                    .average().orElse(0);
            double avgProjects = students.stream()
                    .mapToDouble(s -> s.projectCount)
                    .average().orElse(0);
            
            System.out.printf("%s (%d ?????????):%n", category, students.size());
            System.out.printf("  ??????? ??????: %.2f%n", avgGrade);
            System.out.printf("  ??????? ???-?? ????????: %.1f%n", avgProjects);
        });
    }

    /**
     * ?????? 4.4: ???????????????? ????? "Academic Connections": 
     * ????? ??? ????? ????? ?????????? ????? ????? ???????, ????? ? ??????????????
     * ??????????????? ??: ??????? join'?, ??????????? ??????????????????
     */
    public static void level4Task4() {
        System.out.println("?????? 4.4: ????? ????????????? ??????");
        
        // ?????????????? ??????? ??????? ??? ???????????
        Map<Long, List<Long>> projectsByStudent = dataset.getProjects().stream()
                .flatMap(project -> project.getStudentIds().stream()
                        .map(studentId -> new AbstractMap.SimpleEntry<>(studentId, project.getId())))
                .collect(Collectors.groupingBy(
                    Map.Entry::getKey,
                    Collectors.mapping(Map.Entry::getValue, Collectors.toList())
                ));
        
        Map<Long, List<Long>> coursesByStudent = dataset.getCourses().stream()
                .flatMap(course -> course.getEnrolledStudents().stream()
                        .map(student -> new AbstractMap.SimpleEntry<>(student.getId(), course.getId())))
                .collect(Collectors.groupingBy(
                    Map.Entry::getKey,
                    Collectors.mapping(Map.Entry::getValue, Collectors.toList())
                ));
        
        // ??????????? ????? ??? ?????? 5 ?????????
        dataset.getStudents().stream()
                .limit(5)
                .forEach(student -> {
                    Set<Long> connectedStudents = new HashSet<>();
                    
                    // ????? ????? ???????
                    List<Long> studentProjects = projectsByStudent.getOrDefault(student.getId(), 
                                                                               Collections.emptyList());
                    dataset.getProjects().stream()
                            .filter(project -> studentProjects.contains(project.getId()))
                            .flatMap(project -> project.getStudentIds().stream())
                            .filter(id -> !id.equals(student.getId()))
                            .forEach(connectedStudents::add);
                    
                    // ????? ????? ?????
                    List<Long> studentCourses = coursesByStudent.getOrDefault(student.getId(), 
                                                                             Collections.emptyList());
                    dataset.getCourses().stream()
                            .filter(course -> studentCourses.contains(course.getId()))
                            .flatMap(course -> course.getEnrolledStudents().stream())
                            .map(Student::getId)
                            .filter(id -> !id.equals(student.getId()))
                            .forEach(connectedStudents::add);
                    
                    System.out.printf("???????: %s%n", student.getFullName());
                    System.out.printf("?????? ? %d ??????? ??????????%n", connectedStudents.size());
                    System.out.printf("????????? ? %d ????????%n", studentProjects.size());
                    System.out.printf("??????? %d ??????%n", studentCourses.size());
                    System.out.println();
                });
    }

    /**
     * ?????? 4.5: ??????? "University Ranking Engine": 
     * ??????????? ???????????? ?? ??????????? ???????? (???????? ????????????, 
     * ???????????? ?????????, ??????? ????????, ??????????????? ???????????)
     * ??????????????? ??: ??????????? ????????? ???????????? ? ?????????? ???????
     */
    public static void level4Task5() {
        System.out.println("?????? 4.5: ??????????? ???????????? ?????????????");
        
        List<UniversityRanking> rankings = dataset.getUniversities().stream()
                .map(university -> {
                    // ??????? 1: ???????? ???????????? (??????? ???? ??????????????)
                    double teachingQuality = university.getFaculties().stream()
                            .flatMap(faculty -> dataset.getTeachers().stream()
                                    .filter(teacher -> teacher.getFacultyId().equals(faculty.getId())))
                            .mapToInt(teacher -> teacher.getRank().ordinal())
                            .average().orElse(0);
                    
                    // ??????? 2: ???????????? ????????? (??????? GPA)
                    double studentPerformance = university.getFaculties().stream()
                            .flatMap(faculty -> faculty.getCourses().stream())
                            .flatMap(course -> course.getEnrolledStudents().stream())
                            .mapToDouble(Student::getGpa)
                            .average().orElse(0);
                    
                    // ??????? 3: ????????????????? ?????????? (??????? ?????? ????????)
                    double researchActivity = university.getFaculties().stream()
                            .flatMap(faculty -> faculty.getCourses().stream())
                            .flatMap(course -> dataset.getProjects().stream()
                                    .filter(project -> project.getCourseId().equals(course.getId())))
                            .mapToDouble(Project::getBudget)
                            .average().orElse(0);
                    
                    // ??????? 4: ???? ??????????? (??????? ?? ???????? GRADUATE)
                    long totalStudents = university.getFaculties().stream()
                            .flatMap(faculty -> faculty.getCourses().stream())
                            .flatMap(course -> course.getEnrolledStudents().stream())
                            .distinct()
                            .count();
                    
                    long graduates = university.getFaculties().stream()
                            .flatMap(faculty -> faculty.getCourses().stream())
                            .flatMap(course -> course.getEnrolledStudents().stream())
                            .filter(student -> student.getStatus() == StudentStatus.GRADUATE)
                            .distinct()
                            .count();
                    
                    double graduationRate = totalStudents > 0 ? (double) graduates / totalStudents : 0;
                    
                    // ??????????? ??????? (?????????? ?????)
                    double compositeScore = 
                            (5.0 - teachingQuality) * 0.3 +  // ???????????, ?.?. ??????? ordinal = ???? ????
                            (studentPerformance / 4.0) * 0.3 +  // ??????????? ? 1.0
                            (Math.min(researchActivity / 10000, 1.0)) * 0.25 +  // ???????????? ? ???????????
                            graduationRate * 0.15;
                    
                    return new UniversityRanking(
                            university.getName(),
                            university.getRanking(),
                            compositeScore,
                            teachingQuality,
                            studentPerformance,
                            researchActivity,
                            graduationRate
                    );
                })
                .sorted((r1, r2) -> Double.compare(r2.compositeScore, r1.compositeScore))
                .collect(Collectors.toList());
        
        System.out.println("??????? ????????????? ?? ??????????? ????????:");
        rankings.forEach(ranking -> {
            System.out.printf("%s (??.???????: %d)%n", ranking.name, ranking.officialRanking);
            System.out.printf("  ??????????? ????: %.3f%n", ranking.compositeScore);
            System.out.printf("  ???????? ????????????: %.2f%n", ranking.teachingQuality);
            System.out.printf("  ???????????? ?????????: %.2f%n", ranking.studentPerformance);
            System.out.printf("  ????????????????? ??????????: $%.2f%n", ranking.researchActivity);
            System.out.printf("  ??????? ???????????: %.1f%%%n%n", ranking.graduationRate * 100);
        });
    }

    // ========================================
    // ??????????????? ?????? ? ??????
    // ========================================
    
    private static class StudentPerformanceData {
        final Long studentId;
        final Double gpa;
        final Double avgGrade;
        final Long projectCount;
        
        StudentPerformanceData(Long studentId, Double gpa, Double avgGrade, Long projectCount) {
            this.studentId = studentId;
            this.gpa = gpa;
            this.avgGrade = avgGrade;
            this.projectCount = projectCount;
        }
    }
    
    private static class UniversityRanking {
        final String name;
        final Integer officialRanking;
        final Double compositeScore;
        final Double teachingQuality;
        final Double studentPerformance;
        final Double researchActivity;
        final Double graduationRate;
        
        UniversityRanking(String name, Integer officialRanking, Double compositeScore,
                         Double teachingQuality, Double studentPerformance, 
                         Double researchActivity, Double graduationRate) {
            this.name = name;
            this.officialRanking = officialRanking;
            this.compositeScore = compositeScore;
            this.teachingQuality = teachingQuality;
            this.studentPerformance = studentPerformance;
            this.researchActivity = researchActivity;
            this.graduationRate = graduationRate;
        }
    }
}