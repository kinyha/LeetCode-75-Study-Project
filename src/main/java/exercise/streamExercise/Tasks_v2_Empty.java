package exercise.streamExercise;

import exercise.streamExercise.data_v2.*;

import java.util.*;
import java.util.stream.Collectors;

import static java.util.stream.Collectors.mapping;
import static java.util.stream.Collectors.toSet;

/**
 * Stream API Задачи v2 - университетская система управления (БЕЗ РЕШЕНИЙ)
 * <p>
 * Фокус на:
 * - сложных маппингах и трансформации данных между сущностями
 * - работе с многоуровневыми структурами
 * - группировка и агрегационные операции
 * - производительные решения через параллельные вычисления
 * <p>
 * Уровни сложности:
 * 1-2: базовые операции с фильтрацией и трансформацией
 * 3: группировка, статистика, джойны с многоуровневыми структурами
 * 4: сложные алгоритмы, custom collectors, корреляции
 */
public class Tasks_v2_Empty {
    private static UniversityDataset dataset;

    void main() {
        // Генерируем университетский датасет
        dataset = DataGeneratorV2.generateCompleteDataset();
        dataset.printDatasetStatistics();

        System.out.println("\n=== Уровень 1 задачи ===");
        //level1Task1(students).entrySet().forEach(System.out::println);
        // level1Task2();
        // level1Task3();
        // level1Task4();
        // level1Task5();

        System.out.println("\n=== Уровень 2 задачи ===");
        // level2Task1();
        // level2Task2();
        // level2Task3();
        // level2Task4();
        // level2Task5();

        System.out.println("\n=== Уровень 3 задачи ===");
        // level3Task1();
        // level3Task2();
        // level3Task3();
        // level3Task4();
        // level3Task5();

        System.out.println("\n=== Уровень 4 задачи ===");
        // level4Task1();
        // level4Task2();
        // level4Task3();
        // level4Task4();
        // level4Task5();
    }

    // ========================================
    // Уровень 1: Базовые операции
    // ========================================

    /**
     * Задача 1.1: Выводим имена всех активных студентов с GPA > 3.5
     * Демонстрируем: фильтрация + маппинг
     */
    public static Map<Double, Set<String>> level1Task1(List<Student> students) {
        System.out.println("Задача 1.1: Активные студенты с высоким GPA");
        var a = students.stream()
                .filter(student -> student.getStatus() == StudentStatus.ACTIVE)
                .filter(student -> student.getGpa() > 3.5)
                .sorted(Comparator.comparingDouble(Student::getGpa).reversed())
                .collect(Collectors.groupingBy(student -> {
                            var b = student.getGpa() - student.getGpa() % 100 ;
                            return b;
                        },
                        LinkedHashMap::new, mapping(Student::getFullName, toSet())));
        return a;


        // TODO: Создать List<String> с именами активных студентов с GPA > 3.5
        // Отсортировать по алфавиту
        // Вывести количество и список имен


    }

    /**
     * Задача 1.2: Найти все курсы уровня ADVANCED с количеством кредитов >= 4
     * Демонстрируем: фильтрация по перечислимым значениям
     */
    public static void level1Task2() {
        System.out.println("Задача 1.2: Продвинутые курсы с высокими кредитами");

        // TODO: Создать List<String> с названиями курсов формата "название (X кредитов)"
        // Фильтровать по уровню ADVANCED и кредитам >= 4
        // Вывести количество и список

    }

    /**
     * Задача 1.3: Получить email'ы всех преподавателей с профессорскими званиями
     * Демонстрируем: фильтрация enum + трансформация
     */
    public static void level1Task3() {
        System.out.println("Задача 1.3: Email'ы старших преподавателей");

        // TODO: Создать List<String> с email'ами преподавателей
        // Фильтровать по рангу PROFESSOR или ASSOCIATE_PROFESSOR
        // Отсортировать и вывести

    }

    /**
     * Задача 1.4: Найти все проекты со статусом COMPLETED и бюджетом > 5000
     * Демонстрируем: работа с Optional полями
     */
    public static void level1Task4() {
        System.out.println("Задача 1.4: Завершенные проекты с крупным бюджетом");

        // TODO: Создать List<String> с названиями и бюджетом проектов
        // Формат: "название - $бюджет"
        // Фильтровать по статусу COMPLETED и бюджету > 5000

    }

    /**
     * Задача 1.5: Получить названия всех компаний из IT индустрии
     * Демонстрируем: простая фильтрация строк
     */
    public static void level1Task5() {
        System.out.println("Задача 1.5: IT компании");

        // TODO: Создать List<String> с названиями IT компаний
        // Фильтровать по индустрии "Technology"
        // Отсортировать по алфавиту

    }

    // ========================================
    // Уровень 2: Промежуточные операции
    // ========================================

    /**
     * Задача 2.1: Создать Map<String, List<String>> - город -> список имен студентов
     * Демонстрируем: группировка с маппингом
     */
    public static void level2Task1() {
        System.out.println("Задача 2.1: Студенты по городам");

        // TODO: Сгруппировать студентов по городам
        // Создать Map<String, List<String>> где ключ - город, значение - список имен
        // Вывести статистику по каждому городу

    }

    /**
     * Задача 2.2: Найти средние зарплаты преподавателей по академическим рангам
     * Демонстрируем: группировка с агрегацией
     */
    public static void level2Task2() {
        System.out.println("Задача 2.2: Средние зарплаты по рангам");

        // TODO: Создать Map<AcademicRank, Double> с средними зарплатами
        // Использовать Collectors.groupingBy и averagingDouble
        // Вывести результат с форматированием

    }

    /**
     * Задача 2.3: Получить Set<String> уникальных специализаций всех преподавателей
     * Демонстрируем: flatMap для развертки
     */
    public static void level2Task3() {
        System.out.println("Задача 2.3: Все специализации преподавателей");

        // TODO: Использовать flatMap для получения всех специализаций
        // Собрать в Set для уникальности
        // Вывести количество и список

    }

    /**
     * Задача 2.4: Создать List<String> топ-10 "студент: GPA" отсортированных по GPA убывающе
     * Демонстрируем: сортировка + трансформация
     */
    public static void level2Task4() {
        System.out.println("Задача 2.4: Топ студенты по GPA");

        // TODO: Отсортировать студентов по GPA убывающе
        // Взять первых 10
        // Преобразовать в формат "Имя: GPA"

    }

    /**
     * Задача 2.5: Подсчитать количество курсов по уровням сложности
     * Демонстрируем: группировка с подсчетом
     */
    public static void level2Task5() {
        System.out.println("Задача 2.5: Курсы по уровням сложности");

        // TODO: Сгруппировать курсы по CourseLevel
        // Подсчитать количество в каждой группе
        // Создать Map<CourseLevel, Long>

    }

    // ========================================
    // Уровень 3: Сложные группировки и джойны
    // ========================================

    /**
     * Задача 3.1: Создать Map<String, Map<FacultyType, List<Student>>> - страна -> тип факультета -> студенты
     * Демонстрируем: многоуровневая группировка с join'ами
     */
    public static void level3Task1() {
        System.out.println("Задача 3.1: Студенты по странам и типам факультетов");

        // TODO: Создать карту факультет ID -> тип факультета
        // Сгруппировать студентов сначала по стране, потом по типу факультета
        // Вывести статистику по каждой группе

    }

    /**
     * Задача 3.2: Найти факультет с максимальным количеством стипендиатов
     * Демонстрируем: джойны данных с агрегацией
     */
    public static void level3Task2() {
        System.out.println("Задача 3.2: Факультет с максимальным количеством стипендиатов");

        // TODO: Создать карту факультет ID -> название факультета
        // Отфильтровать студентов-стипендиатов
        // Сгруппировать по факультетам и подсчитать
        // Найти максимум

    }

    /**
     * Задача 3.3: Создать сложную статистику проектов: Map<ProjectType, Map<ProjectStatus, Double>>
     * тип проекта -> статус -> средний бюджет
     * Демонстрируем: вложенная группировка с агрегацией
     */
    public static void level3Task3() {
        System.out.println("Задача 3.3: Средние бюджеты проектов по типу и статусу");

        // TODO: Создать двухуровневую группировку
        // Первый уровень - по типу проекта
        // Второй уровень - по статусу проекта
        // Агрегировать средний бюджет

    }

    /**
     * Задача 3.4: Найти лучшего студента по каждому курсу
     * Демонстрируем: группировка с поиском максимума + join данных
     */
    public static void level3Task4() {
        System.out.println("Задача 3.4: Лучшие студенты по курсам");

        // TODO: Создать карты student ID -> имя и course ID -> название
        // Сгруппировать оценки по курсам
        // Найти максимальную оценку в каждой группе
        // Соединить с именами студентов и курсов

    }

    /**
     * Задача 3.5: Создать отчет по университетам: название -> количество факультетов,
     * общее количество студентов, рейтинг университета
     * Демонстрируем: комплексная агрегация с многоуровневыми данными
     */
    public static void level3Task5() {
        System.out.println("Задача 3.5: Комплексный отчет по университетам");

        // TODO: Для каждого университета вычислить:
        // - количество факультетов
        // - общее количество уникальных студентов
        // - рейтинг и стоимость обучения

    }

    // ========================================
    // Уровень 4: Продвинутые техники
    // ========================================

    /**
     * Задача 4.1: Создать кастомный Collector для сбора статистики по студентам:
     * мин/макс/средний GPA, количество стипендиатов, распределение по годам обучения
     * Демонстрируем: custom Collector с комплексной агрегацией
     */
    public static void level4Task1() {
        System.out.println("Задача 4.1: Комплексная статистика по студентам");

        // TODO: Использовать StudentStatisticsCollector
        // Собрать всю статистику одним проходом
        // Вывести подробный отчет

    }

    /**
     * Задача 4.2: Интеллектуальная система рекомендаций: для каждого студента найти
     * наиболее подходящие проекты на основе его факультета и GPA
     * Демонстрируем: сложные join'ы с бизнес-логикой
     */
    public static void level4Task2() {
        System.out.println("Задача 4.2: Система рекомендаций проектов");

        // TODO: Создать карты для быстрого поиска
        // Для активных студентов с GPA > 3.0:
        // - найти релевантные проекты по факультету
        // - отфильтровать по сложности относительно GPA
        // - отсортировать по сложности и взять топ-3

    }

    /**
     * Задача 4.3: Создать аналитическую систему "Academic Performance Analysis":
     * анализ корреляции между GPA студентов, их оценками в конкретных предметах
     * Демонстрируем: многоступенчатый анализ с корреляциями
     */
    public static void level4Task3() {
        System.out.println("Задача 4.3: Анализ академической успеваемости");

        // TODO: Создать карты для быстрого поиска данных
        // Собрать данные о производительности студентов
        // Сгруппировать по категориям GPA
        // Вычислить средние показатели по группам

    }

    /**
     * Задача 4.4: Многомерный анализ "Academic Connections":
     * найти как много связей между студентами через общие проекты, курсы и преподавателей
     * Демонстрируем: сложные join'ы, создание графов соединений
     */
    public static void level4Task4() {
        System.out.println("Задача 4.4: Анализ академических связей");

        // TODO: Построить карты связей студент -> проекты и студент -> курсы
        // Для каждого студента найти:
        // - связи через общие проекты
        // - связи через общие курсы
        // Подсчитать общее количество связей

    }

    /**
     * Задача 4.5: Создать "University Ranking Engine":
     * ранжировать университеты по комплексным критериям (качество преподавания,
     * успеваемость студентов, научная активность, процент выпускников)
     * Демонстрируем: комплексный многокритериальный анализ с весовыми коэффициентами
     */
    public static void level4Task5() {
        System.out.println("Задача 4.5: Рейтинговая система университетов");

        // TODO: Для каждого университета вычислить:
        // - качество преподавания (средний ранг преподавателей)
        // - успеваемость студентов (средний GPA)
        // - исследовательскую активность (средний бюджет проектов)
        // - процент выпускников
        // Создать композитный рейтинг с весовыми коэффициентами

    }
}